import asyncio
import socket
import time
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from config import TELEGRAM_TOKEN, API_BASE

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã)
try:
    from config import WHITELIST_USERNAMES  # –ø—Ä–∏–º–µ—Ä: {"sergey_golinskiy", "my_admin"}
except Exception:
    WHITELIST_USERNAMES = set()

try:
    from config import SAD_STICKER_ID       # file_id —Å—Ç–∏–∫–µ—Ä–∞, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
except Exception:
    SAD_STICKER_ID = ""

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# --- helpers ---
def api_get(path):
    return requests.get(f"{API_BASE}/{path}").json()

def api_post(path, payload=None):
    return requests.post(f"{API_BASE}/{path}", json=payload).json()

def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "Unknown"

def normalize_username(u: str | None) -> str:
    if not u:
        return ""
    u = u.strip()
    if u.startswith("@"):
        u = u[1:]
    return u.lower()

def is_allowed_username(username: str | None) -> bool:
    allowed = {normalize_username(x) for x in WHITELIST_USERNAMES}
    user = normalize_username(username)
    return bool(user) and (user in allowed)

async def sad_reply_generic(message: Message, text: str = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω üòî"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É—Å—Ç–Ω—ã–π —Å—Ç–∏–∫–µ—Ä + –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
    –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
    """
    sent = False
    if SAD_STICKER_ID:
        try:
            await message.answer_sticker(SAD_STICKER_ID)
            sent = True
        except Exception:
            pass
    # –≤—Å–µ–≥–¥–∞ —à–ª—ë–º —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    await message.answer(text if text else "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω üòî")

# --- middleware –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
# –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ª—é–±–æ–π –∞–ø–¥–µ–π—Ç –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤
from aiogram import BaseMiddleware

class AccessMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ username –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
        msg = event if isinstance(event, Message) else None
        username = None
        if msg and msg.from_user:
            username = msg.from_user.username

        if not is_allowed_username(username):
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ç–∏–∫–µ—Ä/—Ç–µ–∫—Å—Ç –∏ –ù–ï –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ã
            if msg:
                await sad_reply_generic(msg)
            return  # –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ

        # –†–∞–∑—Ä–µ—à—ë–Ω ‚Äî –æ—Ç–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
        return await handler(event, data)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
dp.message.middleware(AccessMiddleware())

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton(text="üîå –†–µ–ª–µ")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚è± –¶–∏–∫–ª")],
        [KeyboardButton(text="üåê IP")],
    ],
    resize_keyboard=True
)

cycle_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞"), KeyboardButton(text="‚èπ –°—Ç–æ–ø —Ü–∏–∫–ª–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

def build_relays_kb():
    st = api_get("status")
    rows = []
    for name in st["relay_names"]:
        rows.append([
            KeyboardButton(text=f"{name} ON"),
            KeyboardButton(text=f"{name} OFF"),
            KeyboardButton(text=f"{name} PULSE")
        ])
    rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ---

@dp.message(F.text == "/start")
async def start_command(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPIO.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=main_kb)

@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def start_btn(msg: Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_kb)

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def status_cmd(msg: Message):
    st = api_get("status")
    relays = "\n".join([f"{k}: {'ON' if v else 'OFF'}" for k, v in st["relays"].items()])
    sensors = "\n".join([f"{k}: {'CLOSE' if v else 'OPEN'}" for k, v in st["sensors"].items()])
    text = (
        f"‚è∞ {st['time']}\n\n"
        f"üîå –†–µ–ª–µ:\n{relays}\n\n"
        f"üìü –î–∞—Ç—á–∏–∫–∏:\n{sensors}\n\n"
        f"üìÇ –°–∫—Ä–∏–ø—Ç: {'RUNNING' if st['external_running'] else 'STOPPED'}"
    )
    await msg.answer(text)

@dp.message(F.text == "üîå –†–µ–ª–µ")
async def relays_cmd(msg: Message):
    await msg.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ:", reply_markup=build_relays_kb())

@dp.message(F.text.regexp(r"^(\w+) (ON|OFF|PULSE)$"))
async def relay_action(msg: Message):
    parts = msg.text.split()
    name, action = parts[0], parts[1].lower()
    if action == "on":
        api_post("relay", {"name": name, "action": "on"})
    elif action == "off":
        api_post("relay", {"name": name, "action": "off"})
    elif action == "pulse":
        api_post("relay", {"name": name, "action": "pulse", "ms": 150})
    await msg.answer(f"‚úÖ –†–µ–ª–µ {name} ‚Üí {action.upper()}", reply_markup=build_relays_kb())

@dp.message(F.text == "‚è± –¶–∏–∫–ª")
async def cycle_cmd(msg: Message):
    await msg.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º:", reply_markup=cycle_kb)

@dp.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞")
async def start_cycle(msg: Message):
    api_post("ext/start")
    await msg.answer("‚ñ∂Ô∏è –¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –Ω–∞–∂–∞—Ç–∏–µ –ø–µ–¥–∞–ª—å–∫–∏...")
    sensor_name = list(api_get("status")["sensor_names"])[0]  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å–µ–Ω—Å–æ—Ä
    start_time = time.time()

    while True:
        st = api_get("status")
        if st["sensors"][sensor_name]:
            elapsed = time.time() - start_time
            await msg.answer(f"‚è± –ü–µ–¥–∞–ª—å —Å—Ä–∞–±–æ—Ç–∞–ª–∞! –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {elapsed:.2f} —Å–µ–∫\n–û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞...")
            break
        await asyncio.sleep(0.5)

    await asyncio.sleep(2)
    await msg.answer("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –û–∂–∏–¥–∞—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...", reply_markup=cycle_kb)

@dp.message(F.text == "‚èπ –°—Ç–æ–ø —Ü–∏–∫–ª–∞")
async def stop_cycle(msg: Message):
    api_post("ext/stop")
    await msg.answer("‚èπ –¶–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=cycle_kb)

@dp.message(F.text == "üåê IP")
async def ip_cmd(msg: Message):
    local_ip = get_local_ip()
    url = f"http://{local_ip}:8000"
    await msg.answer(f"üåê Web UI –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n{url}")

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_cmd(msg: Message):
    await msg.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)

# --- –∑–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
